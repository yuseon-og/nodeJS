--------------------리액트 쓰면 안해도 될것들-------------
1. ejs 파일은 다 싸그리 무시
2. 서버는 데이터 주고받는 api역할
3. 라우팅까지 리액트에서 할 수 있음

-------------------- 서버 만들고 실행 --------------------
  - npm init
  - npm install express
  - server.js 만들고 express = require('express') 하고 app = express()
  - app.listen(포트번호,할일)

------------------------- CSS 파일 넣는법 -----------------------
1. public 폴더 만들어서(view 폴더와 같은 깊이) css 파일 다 집어넣기
2. html에 삽입시키기(기본이지)
3. server.js에 /public 위치에 있는 폴더를 쓰겠다고 선언해주어야 함
   -> app.use('/public',express.static('public'))


----------------------- nav 조립식으로 개발 ----------------------

1. nav.html 파일 만들기
2. nav html코드를 복붙
3. 필요한 자리에 insert 해주기 *ejs*이용
   <%- include('nav.html')%> w
    ** 중요~!!!! <%-   "-" 이놈이다 "="이놈이 아니라
   ** 쌩 html에서는 jquery써야함 ejs에서만 가능
   ** 리액트 사용하면 리액트에서 하면 되....

-------------------- index등 모든 html에 ejs쓰려면 ---------------
1. view 폴더로 이동시키고 확장자 ejs로 변경
2. 서버에서 response.sendFile은 쌩 html을 보낼때!
   그러니까 ejs 파일을 보내려면!
   response.render('ejs파일 이름',{이 이름으로 : 이데이터 보내})
이렇게 설정하면 끝

--------------------GET 요청(서버에서 데이터 가져올때)--------------------
  -app.get("경로",하는일(요청, 응답){
      할일
  })


 HTTP 요청 시스템 : ** 경로와 요청방식이 둘다 있어야 서버에서 알아먹고 동작함**
 - GET : 읽기 뭔가 읽고싶을때
   -> '/경로' 들어갔을때 app.get동작으로 데이터 가져오기
       result에 데이터가 담기니 그것을 html/ejs에 넘겨주기
       
 - POST : 쓰기 뭔가 생성할때
   -> html/ejs에서 form 태그에서 action에 '/경로'주고 method에서 post했을때
      server쪽에서는 app.post('/경로') POST 동작이 실행됨

 - PUT : 수정 뭔가 수정할때
 - DELETE : 삭제 뭔가 삭제할때
   -> ajax나 axios로 프론트엔드(html)에서 delete 요청
   server에서 app.delete('/경로')로 Delete 동작이 실행됨

 Post 하기 위해서는
 1. html form 태그에 action = '/경로' method = "POST"
 2. 각각 input에 name 설정 필요(구별하기 위함)
 3. app.post 쓰기 위해서 app.use(express.urlencoded({ extended: true })); 설정
 4. form 태그에 의해서 오는 데이터 정보는 request안에 있음
 5. request.body.name 하면 접근 가능


** GET,POST,DELETE,PUT 동작할때 경로와 요청방식 둘다 있어야 하는데
  app.get(경로,(요청,응답)=>{
     동작 동작 동작
  }) 
  이렇게 돌때 response 즉 응답은 여러가지 방법이 있다.
   - 응답.send('<p>some html</p>') 
      -> 간단한 문자나 html 전송

   - 응답.status(404).send('Sorry, we cannot find that!')
      -> 응답코드 보내고 문자 보내기

   - 응답.sendFile('/uploads/logo.png')
      -> static(정적인) 파일을 보낼수 있다. 
      
   - 응답.render('list.ejs', { ejs에 보낼 데이터 })
      -> render는 ejs등 템플릿이 적용된 페이지 랜더링 해줌
   
   - 응답.json(제이슨데이터)
      -> 제이슨 데이터 담아보낼수 있음




 --------------------API란?--------------------
 REST하게 API짜는게 좋다.
 API : Application Programming Interface
 웹개발 환경에서 API는: 웹서버와 클라이언트 간의 소통 방법
 어떻게 해야 서버랑 통신을 할 수 있을까
                       
 이 API를 어떻게 짜야 REST 하게 짤수 있을까

** REST 원칙 6개
1. Uniform Interface(이게 제일제일 중요해)

인터페이스는 일관성이 있어야한다는 소리가… 뭔소리냐면 
– 하나의 URL로는 하나의 데이터를 가져와야함 (하나를 가져오기 위한 두개의 URL을 만들지 말자)
– 간결하고 예측가능하게 짜세요 (URL 하나를 알면 둘을 알게)
– URL 이름짓기 관습을 잘 따라주세요

좋은 이름짓기 관습
-> url만보고도 예측이 가능해야해
-> URL을 명사로 작성
-> 하위문서 나타낼때는 /
-> 파일확장자 쓰지말것
-> 띄어쓰기는 대시(-)이용
-> 자료하나당 하나의 URL
 

(참고)
다른 곳에서 URL 대신 URI 이런 용어를 많이 쓰기도 하는데 
URI는 자료를 넘버링하고 분류하고 지칭하는 방법이라 보시면 됩니다. URL과 비슷하지만 조금 더 큰 의미입니다. 
도서관에서 책 분류할 때 URI에 의해서 분류하기도 합니다. 

 
2. Client-server 역할 구분하기
서버는 응답만, 클라이언트(브라우저)는 요청만
고객들은 그냥 URL 하나만 알면 서버에 있는 자료를 갖다쓸 수 있습니다. 
고객에게 서버역할을 맡기거나
고객에게 DB에 있는 자료를 직접 꺼내라고 하든지 그런 식으로 코드를 짜시면 안됩니다. 

3. Stateless
요청들은 각각 독립적으로 처리되어야합니다. 
요청1이 성공해야 요청2를 보내주고 그런 식으로 요청간의 의존성이 존재하는 코드를 짜시면 안됩니다. 
다르게 말하면
요청하나 만으로 자료를 가져오기 충분하도록 
요청에 필요한 모든 정보들을 실어 보내는게 좋다는 뜻이겠죠? 
 
4. Cacheable(크롬이 알아서 해줌)
요청을 통해 보내는 자료들은 캐싱이 가능해야합니다.
그리고 캐싱가능하다고 표시하거나 캐싱 기간을 설정해주어야 한다고 합니다.

* 캐싱이뭐냐면
네이버를 방문하면 크롬 브라우저는 자동으로 자주 사용하는 이미지 파일, CSS 파일 등을 하드에 저장해놓습니다. 
별로 바뀔일 없는 네이버 로고나 아이콘 같은거요.
하드에 저장해놓고 네이버 방문할 때 네이버서버에 네이버 로고주세요~라고 요청하지 않고 하드에서 불러옵니다.
이 행위를 캐싱이라고 합니다. 

5. Layered System(안중요해)
요청처리하는곳, DB에 저장하는곳 이런 여러가지 단계를 거쳐서 요청을 처리해도 됩니다.
멋있게 말하면 여러개의 레이어를 거쳐서 요청을 처리하게 만들어도 된다고 합니다.
우리도 그렇게 할 것입니다.

6. Code on Demand(안중요해)
서버는 고객에게 실제 실행가능한 코드를 전송해줄 수도 있습니다. 


------------------------ 웹사이트 기능 만들기 기본------------------------
1. 서버로 데이터 전송할 수 있는 UI 만들기
2. 서버에서 원하는데로 정보를 처리

------------------------DataBase 기본----------------------------
1. Sql : 관계형 데이터베이스 3차원 데이터 넣기 어려워
2. NoSql : Objext 자료형으로 입출력 가능
   Dynamo, Oracle NoSQL, MongoDB, Redis, Cassandra

----------------------------MongoDB 관련--------------------------------
1. MongoDB atlas 가입
2. free 부분 가입
3. 클러스터 만들때 물리적으로 가장 가까운곳 선택
4. 다 만들어지면 Database Access에서 아이디 비번 설정(유저)
  ** MongoDB DataBase Access
    ID : admin
    PW : admin1234
5. Network Access에서 접속할수있는 IP설정
   - 아무곳에서나 접속가능하도록 함 0.0.0.0/0

6. Cluster에서 Connect해야함
   connect -> connect your application
   언어와 버전 선택
   아래의 코드가 가장 중요하다

   mongodb+srv://admin:<password>@cluster0.gbnj2.mongodb.net/myFirstDatabase?retryWrites=true&w=majority

7. npm install mongodb 하고 MongoClient.connect 쓸것

8. collection 설정
      - DataBase는 폴더 / collection은 각 파일들
      - add my own data
      - 변수(db) 선언하고 db = client.db("todoapp"); -> 변수 db는 이제 todoapp에 접근한것임
      - 그다음 db.collection으로 collection에 데이터 넣기 할수 있음

9. collection에 접근하여 데이터 저장
   - 변수.collection('collection이름').insertOne({데이터},(error, result)=>{
      error 났을때 뭐 보여줄래
      저장 성공했을때 뭐보여줄래
   })

10. collection에 접근하여 데이터 가져오기 find()
   - 변수.collection('collection이름').find()
    그리고 모든 데이터를 다 받아와서 배열에 저장해야해
    - 변수.collection('collection이름').find().toArray((error, result)=>{
       해야할 동작
    })
    - 이렇게 받아온 result를 ejs안에 꽂아 넣을수 있어야 한다.

**** get이든 post든 반드시 응답.send( ) 이부분은 반드시 존재해야 한다.

11. _id 값은 항상 있어야 한다 하드코딩은 안된다. 당연히
   - 게시물에 id를 넣는다면 : 총개시물 개수 +1을 해주면 됨
   - 총 게시물 개수??? -> auto increment라는 기능 but mongo DB에는 없는 기능 ㅠㅠ
   - 글 번호는 유니크하게 관리해야함

   -> 하는법 글번호 id를 따로 관리하기 위해서 collection을 추가로 만듦
      counter 라는 collection 만들고 거기에 totalPost : 0, name : "개시물 갯수" 
      여기에 게시물을 하나 발행할때마다 totalPost 부분을 1씩 증가 시킬것임

   -> post 할때 id 부여 할수있도록 하는법
     1) db.collection에서 counter 먼저 열어서 findOne으로 찾는다. findOne({찾는거},콜백함수(error, result))
     2) result.totalPost로 총 게시물 수를 받아서 변수(WOW)에 넣는다.
     3) db.collection('post')를 열어서 데이터 저장을 시작한다
     4) 이때 _id에 변수(WOW)를 넣어주고, 나머지 데이터를 넣어준다
     5) db.collection('post') 닫고나서 db.collection('counter')안에 totalPost도 1을 증가시켜야 한다.

   -> totalPost 증가시키는법 db.collection('count').updateOne({어떤데이터를},{이렇게 수정해줘}, 콜백함수없어도 되긴함)
     1) 수정할때 쓸수있는 함수 updateOne(한개) updateMany(마니)
     2) 기본사용 : 첫번째 자료를 찾아야해 유일한놈(name)으로
                   두번째 $set:{totalPost:1} 이거는 걍 1로 바꿔버리는거
                          $inc:{totalPost:1} 이거는 1을 증가시키는거
                   세번째 : 콜백함수로 error, result 설정해줘 !! 없어도 동작은 잘됨!!

      ** update 류의 함수를 쓸때는 수정값 부분에 { 오퍼레이터 : {키 : 벨류}}하면 됨
      몽고DB에서 가장 어려운 거래.... operator 는 $set, $inc, $rename 등등 찾아서 사용

   

12. 게시글 발행기능 총정리
   0) db선언하고 db와 connect해서 db.collection 쓸수있게 해놓기
   
   1) write.html에서 (ejs일수도 있겠지?) form 태그에 action = "/경로" method="POST" 설정
   
   2) form 태그 안에 input에 name 각각 설정
      -> 일케하면 submit 했을때 action의 경로로 POST 방식으로 input의 name이름으로 데이터가 날라감
   
   3) 데이터 날라오니까 server.js에서는 받아서 처리해줘야해
   
   4) POST로 날려주니까 app.post로 받아주고, 경로는 action에서 설정한 '/경로'를 정해주면 form에서 보낸 데이터 오겠지
   
   5) 콜백함수에는 (request, response)로 파라메터 설정해주고 함수를 크게 열어서 db가지고 지지고 볶고 다해야함
       request(요청)에는 날라온 데이터가 들어있어
       response(응답)은 뭐 어떻게 반응 해주까 하는것(팝업을띄워, 리다이렉트를해 등등)
   
   6) 그 다음 counter collection을 먼저 받아오자
      - findOne으로 counter에 name이 "특정한것"인놈을 찾아와
      - 콜백함수는 error와 result로 result.totalPost하면 counter 값 접근가능
      - 이 카운터값을 별도로 선언한 변수(idCounter)에다 담아놔
      ** 아직 5) 콜백함수 내부임
   
   7) 그리고 이제 post collection에 데이터를 저장하자 
       중요중요!!!!!!! 아직 열려있는 counter collection안에서 해야한다 
         why? totalPost의 값을 받아온 변수 idCounter가 지역변수니까 살아있는 scope 안에서 데이터 저장해야헤
      - post collection 열어주고 insertOne으로 한개를 넣어줍시다.
      - 넣어주는건 {_id:idCount변수, title:request.body.title, date : request.body.date} 이렇게
          아직 5)콜백함수 내부여야만 request로 아까 form에서 POST 방식으로 넘어온 데이터 쓸수있어
      - 콜백함수로 넣고나서 할 동작 error와 result로 정해주기
      ** 아직 5) 콜백함수 내부임 + 6)의 콜백함수 내부임

    8) post collection열여 있는 상태로 아까 counter collection의 totalPost를 변경(update)해주자
      - 아직 5)와 6) 콜백함수 내부인데 7) 콜백함수 내부에서 counter collection 열어서 update 하자
      - .updateOne 함수를 사용
      - .updateOne({특정한거 찾아},{이렇게 바꿔},콜백함수(error, result))
         첫번째 파라메터 : {특정한거 찾아} 아까 6)과 동일
         두번째 파라메터 : {이렇게 바꿔} 요놈이 어려움
           바꾸는 방법 {$오퍼레이터:{어떤키값을 : 일케바꿔요}}
           $오퍼레이터는 다양함, 예시 : $set 아예 값을바꿔요 $inc 바꾸라는것만큼 증가시켜요
         세번째 파라메터 : 항상있는 콜백함수 에러처리





-------------------ejs 셋팅 관련----------------------
    ejs는 node.js에서 view 부분을 담당하는 것으로 html을 그려주는 역할
    html 사이에서 js 문법으로 변화를 줄때 사용

    왜 사용하는가?? : 그냥 html을 사용하면 정적인 페이지가 된다.
    그래서 EJS나 Pug 같은 템플릿 엔진을 사용 즉 서버의 데이터를html에 
    쉽게 박아넣을수 있도록 하는 랜더링 엔진

셋팅하는법
1. npm install ejs

2. server.js에서 app.set('view engine','ejs') -> view 엔진으로 ejs를 사용하겠다 선언

3. 보여주는 파일을 XXX.ejs로 만들기(html이랑 같은 파일이지만 서버데이터를 넣을 수 있다.)



    <%   %> if나 반복문 같은거 적용할때 사용
    <%= 서버에서 보낸 데이터 변수명 %>
    <%-  %>


4. ejs 파일을 보여주는 법
  - app.get('/list',(요청,응답)=>{
     응답.render('list.ejs') -> 이렇게 쓰면 list.ejs 파일을 렌더링해서 보여줌

     ** find().toArray()로 result를 받아왔고, 이것을 ejs 파일에 넘겨줘서 랜더링 시키려면
     응답.render('랜더링할 ejs 파일',{이름 : result})로 넘겨준다
      즉 "랜더링할 ejs파일에다가 디비에서 받아온 result를 "이름"이라는 이름으로 넘겨주이소

  })

5. 이때 ejs 파일은 위치가 매우 중요하다 무조건 views 폴더 내에 위치해야한다.

- JS 반복문 연습

for(let i=0; i<이름.length; i++){
   반복할 코드
}
이 반복문을 ejs 안에서 쓰려면 <%    %>이 안에 써야한다

-------------------- 삭제 DELETE 기능 관련----------------------
!!! form 태그의 method는 GET과 POST 요청 밖에 안된다.... DELETE / PUT 불가능
 해결방법
 1. 라이브러리 method-override 이용(node에서 쓸수 있는) -> form에서 DELETE 가능해짐
 2. Ajax이용(언젠간 쓸꺼니까 이거 꼭 다뤄야하니 이거쓰자)

 Ajax란?
   프론트 엔드에서 자바스크립트로 서버에 요청할수 있는 문법(서버와 통신할 수 있는)
   장점 : 새로고침 없이 해당부분만 변경할수있게 서버랑 통신가능
   ** 그냥 자바스크립트로도 사용가능하지만
      정신건강을 위해서 jquery를 써라
   ** 나중에는 axios를 쓰면 될듯

   - Ajax 사용해서 DELETE 구현하기
      1) html에서 자바스크립트 작성하는법
         - <script>요기다가 작성하면 됨</script>
      
      2)jquery 설치
           <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
            integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
            crossorigin="anonymous"></script>
        부트스트랩에서 이미 jquery 넣어놨다 그러나 slim버전이고 이상한거 붙었다 
         <script src="https://code.jquery.com/jquery-3.5.1.min.js">  </script>
         이렇게 변경해서 cnd 방식으로 설치(구글 검색
         )

      3) jquery 설치 후 어디에서 작업?
         jquery 설치된 script 아래에 작업해야함 반드시~!

      
      4) Ajax 기본문법
          $.ajax({
                   method : 'DELETE',  -> 서버에 새로고침 없이 delete 할꺼야~
                   url : '요청할 경로',
                   data : '요청과 함께 보낼 데이터'   -> 예를들면 게시물번호
                 }).done((결과)=>{
                    요청이 성공하면 여기꺼를 실행해주세요
                    결과가 있어야 하는 요청이면 위에 결과에 있을꺼에요
                 })

      5) server에서 동작은
         app.delete('/경로',(req, res)=>{
            **ajax에서 data를 넘겨보냈으면 req.body에서 확인가능

         })

      5-2)  DELETE 메소드
         db.collection('post').deleteOne({어떤 항목을 찾아서 삭제할래?}, () => {
         요청이 성공하면 해야할일     })
         **** deleteOne(삭제할거, 성공하면 할 행동) -> 여기에서 삭제할거 자료형 맞춰줘야해~!!!
         req.body._id = parseInt(req.body._id)이렇게 int형으로 바꾸어 줄것

      6) 여기까지 하면 새로고침 할때마다 해당 아이디의 글이 삭제된다.
         -> 삭제 버튼을 누를때만 삭제 시켜야해
         -> jquery 문법사용
         $('.delete").click(()=>{
            $.ajax .......
         }) 
           -> 이 문법은 jquery로 "delete"라는 class를 가진 요소를 click하면
           어떠한 동작을 해라 라는 뜻

      7) 어떤 삭제버튼을 눌리면 그 삭제버튼의 글번호(_id)만 삭제되게
         1) ejs로 데이터가 넘어와 있으니 당연히 _id도 있다.
         2) 글번호를 노출시키려면 posts[i]._id 하면 됨
         3) 글번호 노출 안시키려면 태그 속성에다가 data-id="<%=posts[i]._id%>" 하면되
         4) ajax의 data 부분에 {_id : 여기에다가 지금 내가 클릭한 버튼의 id 넣으면되}
         5) $(".delete").click((e)=>{
            let 글번호 = e.target.dataset.id 이러면 태그 속성에 숨겨진 id 가져옴
            ** 궅이 data-id 안해도되 걍 id로 지정하고
            e.target.id 이렇게 잡아도 가능해
         -> 여기까지 하면 server는 동작해서 글을 삭제하는데
            ejs는 새로고침 하기전까지는 그대로 있는디
            그러면 ajax 성공시 
               -> 페이지 강제 새로고침 또는
               -> 삭제버튼 누른 li요소를 안보이게/제거해 주세요
      
      8) 서버에서 요청을 잘 처리했다 / 안했다 안내메세지 줘야해
         -> 서버측에서만 알수 있는것은 X 
            클라이언트에서 알수 있도록 메세지 전송해줘야함
            jQuery로 쓰려면 .fail(function(){
               이 안에다 써주면 됨

            })
         -> 서버에서 먼저 성공 실패 판정부터 시작
            판정하고 서버가 200 / 404보내주면 클라이언트에서
            200이냐 404냐 500이냐에 따라 반응 달리 해주면됨
            서버가 응답으로 status 를 주자 200 / 404 등
            .send로 서버에서 메세지 보내는 방법 사용

      9) 지운거 HTML도 삭제해보자 : 제이쿼리는 새로고침 없이 동작하니까..
               **jQuery에서
                  e.target : 지금 클릭한것
                  this : 지금 이벤트 동작하는곳

            지금누른거.부모님중에("li") 를 찾아주세요
            지금누른거.parent('li').fatdOut() -> 사라지게 해줘요

**** arrow function과 그냥 function에서 $this의 의미가 다르다~!!!!!
         
      10) Detail 페이지 여러개 만들기
         -> app.get("/detail/여기 여러번호) 오도록 만들기
           - /detail/:id   ":id" 이놈으로 무작위 번호 받도록
           - :id 를 쓰면 어떤 값이든 올 수 있고, 이 값은 request.params에 파라메타로 전달된다.
           - 쓰기 위해서는 req.params.id 하면 됨
         -> 어떤 :id 번호가 들어오면 id 번호에 맞는 게시물을 DB에서 찾기
           - db.collection("db이름").findOne({뭘 찾을건지(detail/뒤에 있는 숫자)}, (에러, 결과)=>{
              에러 났을때
              결과 났을때 : app.get 함수에 response를 줘야한다.
                    => response.render("ejs파일",{ 이런 파라메터이름으로 넘겨줌 : 이런 데이터를 })

           })
           ** 이때 findOne({뭘 찾을건지}. <-- 이부분 디테일하게 보자
              {db에 있는 기준id : 넘어져오는 req.params.id}
              but 여기서 req.params.id는 string 형식이니 int형으로 parseInt 해주어야 함

         ** 없는 게시물은 어떻게 처리할까?
            findOne 함수는 실험해보니 매칭되는게 없어도 error는 null이다...
            어떤 경우에 error가 나는지는 미확인
            그냥 error 나는경우 status 500 주고
            result가 null인경우 404 주고
            result가 null이 아닌경우 ejs 출력해주면 됨/데이터 넘겨주면 됨

         ** 목록list에서 제목 클릭하면 상세페이지로~
            list.ejs의 할일 제목을 a 태그로 감싸고 href로 경로 /detail/<%=여기에 넘어온 거._id%> 해주면 됨



-------------------- 수정 PUT 기능 관련----------------------
   1. 보이는것 먼저
      1) 상세페이지에 수정버튼 눌리면 edit.ejs/:id로 이동시키기
      2) edit.ejs/:id에서는 write.ejs 와 같은 폼인데 value가 들어가있어야 함
         -> 여기는 상세페이지에서 :id로 DB에서 정보 받아오는 로직 똑같이 쓰임
      3) 수정버튼을 눌리면 바뀐 내용으로 수정되도록 해야함
         !!!!!!!!!!! HTML은 기본적으로 GET, POST 메소드 밖에 없다
         !!!!!!!!!!! PUT을 쓰려면
                  1. Axios / jquery등 쓰던가
                  2. Method Override 설치해서 쓰던가 put/delete 둘다 사용가능
         여기선 2번 방법으로 진행
            1. npm install method-override
            2. server.js에 넣어서 사용가능토록 만들기
               const methodOverride = require('method-override')
               app.use(methodOverride('_method'))
            3. html의 form 태그에 
               action="/edit?_method=PUT" method="POST" 로 사용

   2. server를 수정
      1) 수정페이지에서 수정버튼 누르면 갈곳은 /edit이고 method는 POST 인 상황
      app.post("/edit",(req,res)=>{
         여기에는 {어떤 데이터를 찾아서} {그 데이터 안에 요고 요고는 요렇게 바꿔주세요} {끝나고 나면 이거 실행시켜요}
      }) 

      2) 수정페이지에서 req.body에 값을 넘겨주는데 form 태그 안의 input에서 넘겨주는데 name 값이 id, 제목, 날짜 다 있어야 해

      3) 수정페이지에서 display:none으로 하는 id값을 posts._id에서 가져온걸 input 태그 하나에 넣어줘서 넘겨주자

      4) server에서 이제 updateOne으로 시작
         ({수정할거 찾는 기준},{데이터 : req.body.수정할놈},콜백함수)
            ** 두번째 파라메터 중요
            {$set : {db에 이름:수정할놈}} 일케 해줘야하는데
            $set -> 이놈은 업데이트 해주세요(없으면 추가해주시고요)라는 뜻
      
      5) 콜백함수는 error나면 에러 출력해주고 성공하면 성공했다 해주고

      6) 아무런 반응이 없는것을 대비해서 redirect 해주자

      7) 실행시켜봤는데 안된다??? req.body.id 이놈을 항상 조심하자
         id값이 항상 posts._id로 넘어오는데 넘어오는놈은 string 형태이고
         DB안에는 int형이니까 parseInt 항상 해주자
            -> 요거 안해주면 페이지 움직임과 로그는 다뜨는데 DB수정이 안된다


---------------여기까지가 CRUD-------------------------
-------------------------------------------------------

-----------------------회원인증방법---------------------

      1. session-based
      2. token-based : JSON Web Token
      3. Open Authentication

------------------Session -Based 방식(가장 간단한 방법) --------------

1. 설치할 라이브러리
   로그인 : passport
   로그인 검증 : passport-local 
               local은 직접만들어 쓰겟다. 다른거 막 twiter나 다른라이브러리 쓸수 있음
   세션생성 : express-session  ** 실제 서비스할때는 이거말고 MongoDB에 세션데이터를 저장해주는 라이브러리 이용해라

2. 라이브러리 require 준비
   const passport = require('passport');
   const LocalStrategy = require('passport-local').Strategy;
   const session = require('express-session');

3. 미들웨어 준비
   app.use(session({secret : '비밀코드', resave : true, saveUninitialized: false}));
   app.use(passport.initialize());
   app.use(passport.session()); 

   웹서버는 요청 - 응답해주는 기계인데 이 요청과 응답 중간에
   뭔가 실행되는 코드가 미들웨어다.

   "비밀코드"는 세션 만들때 비밀번호, 아무거나 상관X
--- 여기까지 셋팅 끝

5. 흐름 : 
         -> 로그인 페이지 제작
         -> 로그인 요청시 아이디/비번 검증 미들웨어 실행시키기 -> app.post('/',여기 들어가는놈,(req,res)=>{})
         -> 아이디 비번 검증하는 세부코드 작성
            -> 입력한 아이디/비번이 DB와 맞는지 비교
         -> 맞으면 세선 만들어 저장 ( 마이페이지 방문시 세션검사 등)

      1) 로그인 페이지
         input 2개에 form태그에는 /login 으로 POST 요청
         input은 각각 name이 id / pw로 변경해주어야 함
         pw는 type을 password 해주는게 보안상 좋지

      2) server에 /login으로 들어오면 페이지 보여주기 get으로 login.ejs 렌더링

      3) /login에 POST로 들어오면 아래 흐름 실행
         -> 로그인을 하면, 아이디랑 비번을 검사하세요(아래의 passport 들어가는 부분)
         -> 통과가 되면 응답을 해줄꺼다

         app.post("경로",passport여기 들어감, (res,req)=>{
            성공하면 여기로
         })
         passport.authenticate('local',{
            failureRedirect: "/fail",
             //로그인 실패시 여기로 이동시켜주세요
         })
      
      4) 아이디 비번 인증하는 세부코드는 별도로
         
         - 세부코드 해석1
         passport.use(new LocalStrategy({
            usernameField: 'id', (요기는 사용자가 제출한 아이디가 어디 적혔는지)
            passwordField: 'pw', (요기는 사용자가 제출한 비번이 어디 적혔는지)
            session: true, (요기는 세션을 만들건지)
            passReqToCallback: false, (요기는 아이디/비번말고 다른 정보검사가 필요한지)
         });

         - 세부코드 해석 2
         (userId, userPw, done) => {
            console.los(userId, userPw);  // 사용자 입력한거 한번 보는거

            db.collection("login").findOne({ id: userId }, (error, result) => { //DB의 login 콜렉션에서 userId와 DB의 id가 같은걸 찾아봐
               if (error) { 
                  return done(error); // 찾는데 이러나면 에러로 끝
               } else if (!result) {
                  return done(null, false, { message: "존재하지 않는 아이디요" }); // 찾는데 result가 없다면 아이디가 없는거지
               } else if (userPw == result.pw) {
                  return donw(null, result); // 찾았다! 그럼 이제 user가 입력한 pw와 찾은 result의 pw와 비교해봐 맞아? 로그인 확인
               } else {
                  return done(null, false, { message: "비번틀릿으요" });  // 비번이 안맞아 그럼 에러
               }
            });
            }

         ** 중요부분 : 파라메타가 id, pw, done 세개가 들어간다
         done이 뭐냐? : 라이브러리 문법이다.
                        3개의 파라메터 가진다(서버에러,성공시 사용자 DB데이터, 에러메세지)

         done으로 모든것을 리턴하게 되어있다.
            -성공하면 done(null,result)
            -실패하면 done(null,false,메세지)
            -에러나면 done(error)

         ** 보안상 중요부분
         userPw == result.pw 비교할때 바로 비교하면 보안상 최악
         – 애초에 DB에 pw를 저장할 때 암호화해서 저장하는 것이 좋으며
         – 사용자가 입력한 비번을 암호화해준 뒤에 이게 결과.pw와 같은지 비교하는게 조금 더 보안에 신경쓴 방법

      5) 검사가 끝나면!! 세션을 하나 만들어서 저장해두어야 함
         - 세션에 등록하는 법

         passport.serializeUser((user, done) => {
           done(null, user.id)    -> result의 id를 이용해서 세션을 저장시키는 코드
            })
         // 세션을 저장시키는 코드(로그인 성공시)
         // user.id 라는 정보로 세션을 만들어 저장함
         ** 아이디 비번 검증시 result 나오는거를 여기 파라메터 user로 보냄
         // 세션 데이터를 만들고 세션의 id정보를 쿠키로 보냄



         passport.deserializeUser((userId, done) => {
            done(null, {})
            })
         // 나중에 마이페이지 접속시 쓸꺼임
         // 이 세션 데이터를 가진 사람을 DB에서 찾아주세요 라는 뜻

--------- 여기까지 로그인 기능 >> 추가로 로그인했는지 안했는지 세션으로 판단하기 ---------

미들웨어 쓰는법~!!!!!! '경로', 미들웨어, 콜백함수 이렇게 미들...에 쓴다.

app.get(요청, 미들웨어, 응답) 이런식이니까!!

   1. 마이페이지 만들기
      걍 만들고 라우팅해....
   
   2. 마이페이지 접속전에 "로그인"했는지 확인(하는 미들웨어 만들기)
      function logInConfirm(req, res, next) {
         if (req.user) {
            next();
         } else {
            res.send("로그인부터 해라....");
         }
         }
         req(요청),res(응답),next 3개 파라메터 필요
         이 미들웨어 함수를 app.get의 미들에 사용
         여기서 req.user?????
         req.user는 누군가 꽂아준 상태이다 그놈은 deserializeUser
         이 함수는 req.user가 있는지만 확인하는놈이다.
         req.user는 로그인 후 세션이 있으면 항상 있어야 함
   
   !!!!    deserializeUser 라는 기능 때문에 항상 req에 user가 존재하는 상황
   !!!! 아무곳에서나 req 출력해보면 Passpot와 session 내용이 있다. 그리고 user도 있다...



   --------- deserializeUser ---------

   로그인한 유저의 세션아이디를 바탕으로 개인정보를 DB에서 찾음

   1. deserializeUser는 userId 정도만 가지고 있고 그걸 req에 뿌려준다.
   2. DB에서 해당 유저의 정보를 가져와서 이용하고 싶다면
      여기에서 가져와서 결과 반환해줘야 한다.
   
로그인 Flow를 잘 아는게 중요하다~!!!!

1. 로그인 페이지 제작
      -> form에서 보내주기

2. 로그인 요청시 아이디/비번 검증 미들웨어 실행시키기 -> app.post('/',여기 들어가는놈,(req,res)=>{})
      -> 여기에서 passport 사용해서 성공/실패 분기 설정

3. 아이디 비번 검증하는 세부코드 작성
      -> 외부에 별도로 만들기
         입력한 아이디/비번이 DB와 맞는지 비교  passport.use(new LocalStrategy 사용

      -> 맞으면 세선 만들어 저장 : serializeUser
      
      -> 나중에 쓰기위해 req 뿌려주기 : deserializeUser
         

-------------------.env 환경변수 ------------------
1. DB접속이나 포트번호등 딴데가서 바뀌는거 전역변수처럼 관리하는거
2. npm install dotenv
3. require('dotenv').config(); 로 사용할수있게 server.js 등록
4. .env 파일 만들고 여기에 변수명 = 값으로 저장
5. 쓰고자하는 위치에서 불러오기
   사용법 : process.env.변수이름


**남은거!!

1. 검색기능 만들기
2. 회원기능 포함한 게시판
3. API 라우터로 관리하기
4. 이미지 업로드 / 이미지 서버 만들기
5. 웹소켓으로 채팅만들기

-----------------------GET / POST--------------------

둘다 서버로 form이 가지고 있는 데이터 전달위해 사용~!

1. GET 메소드
   1) 한번의 데이터 요청시,전송 데이터의 양은 주소값+파라미터로  255자로 제한이 된다.
   2) 저장된 data를 단순히 요청할때 사용한다.
   3) URL에 그대로 query의 이름과 값이 같이 연결되어 표현된다.
      ->Query String 형태로 url 뒤에 붙어서 서버로 날라간다

2. POST 메소드
   ** 입력한 정보를 숨겨서 보낼때!! 데이터 작성, 수정, 로그인등 post 사용


사용할때 구분 기준   GET :  가져온다  POST : 수행한다


----------------------검색기능 만들기-------------------

1. 검색할수있는 input / button / form 태그 만들기

2. input에 name 설정하고 여기에 들어오는 value를 보내주기(GET방식, POST 방식)

3. GET 방식으로 보내주고 form에서 수행할 url 설정 /search

4. server에서 /seacrh에 get 방식 들어왔을때 수행하게 함
   1) html에서 보내오는 데이터를 어떻게 받는가? req.body.name이었는데...
      ** GET 방식에서는 req.query로 받아야 한다
      ** POST, DELETE, PUT은 모두 req.body로 가능하다. 매우중요!!!
   2) find로 {제목 : req.query.name} 으로 찾아서 .toArray((error,result))로 보내주기
   3) toArray 함수의 콜백함수 내부에서는 result를 뿌려줘야지 
   4) searchlist.ejs 만들어서 posts라는 이름으로 result를 보내줘

5. posts를 받은 searchlist.ejs는 받은것만 그려주기

// 여기까지 기본 검색기능인데.문제가 검색어랑 일치하는것만 뺀다 find함수 한계
// 해결해보자

6. 정규식 사용 : /  여기에다 문자 담기 /  // 요고 사이에 문자 넣으면
   
   /abc/ 이렇게 적으면 문자열에 abc가 있냐 라고 물어보는것

   정규식이란 : 문자를 검사하는 식

   req.query.searchTerm 이런 변수를 넣지를 못한다... 심각하기 문제구나
   할수있는법
   let term = new RegExp(변수,"패턴지정") 이렇게 해결해보자
   let term = new RegExp(req.query.searchTerm) // 일치하는 패턴 중 최초 등장하는 패턴 한 번만 찾음
   let term = new RegExp(req.query.searchTerm,"g")  // 모든 패턴을 찾음
   let term = new RegExp(req.query.searchTerm,"gi") // 대소문자 구분 없이 모든 패턴을 찾음

   이렇게 정규식으로 변환하고
   .find({ 제목: term }) 이렇게 사용하면 됨


------------ 게시물이 매우 많을때 쓰는 indexing -----------------

1. 컴퓨터는 기본적으로 처음부터 탐색해서 조건에 맞는것을 준다.

2. UP/DOWN 으로 물어봐서 찾아내는게 Binary Seacrh
   -> 70 찾을때 1) 50이상? Yes/no 이렇게 하는거

3. Binary Seacrh 하려면 숫자순으로 정렬이 되어있어야 한다.
   mongoDB는 _id 순으로 정렬해주기때문에 바로 Binary Seacrh 가능
   but 제목, 날짜 이런 스트링은 정렬이 안되어있다.

4. 제목등을 미리 정렬이 된 collection을 하나 더 만들어 두는것
   -> indexing이다.
   -> 기존 collection을 정렬해놓은 복사본이다.
   -> mongoDB atlas에서 클릭몇번으로 생성가능하다.
   collection -> indexes -> create index
    여기에서 field에 정렬하고 싶은 항목을 적고 type을 설정해줘
    type이 숫자일때는 1 또는 -1 오름/내림차순

** 인덱싱은 그냥 정렬된 사본하나 더 만드는거다~

------------------------index 만들어 둔걸로 빠르게 검색하려면 ---------------
.find에다가 .find({ $text: { $search: req.query.searchTerm } })
일케 해주면 되는데 $text는 TEXT 기준으로 만들어놓은 index이고
$search는 찾는 명령어지

!! 이렇게 해도 단어 일부만 들어가있는것은 못찾아
정확한 단어 if 글쓰기 , 글쓰기 글쓰기, 많이 글쓰기
이렇게 있다면 글쓰기를 검색해야 함
-> 코딩하기, 코딩배우기, 코딩연습 여기서 코딩만 치면 검색안되
mongoDB는 띄어쓰기 기준으로 단어를 text index에 저장하기 때문이다!

!!영어가 아닌 언어는 이 text search 기능을 이 심각한 문제때문에 쓸수가 없다....

---------------------- 해결책 ------------------------------

해결책 1. 검색할 문서의 양을 제한을 둡니다.
   - DB에다가 검색요청을 날릴 때 특정 날짜에서만 검색하라고 요구할 수도 있고
   - skip(), limit() 이런 함수를 이용하시면 pagination 기능을 개발할 수 있습니다.
   - 그니까 맨 처음 검색할 땐 맨앞에 20개만 찾아줘~
   - 그 다음엔 다음 20개를 찾아줘~ 
   - 이렇게 요구할 수 있다는 겁니다. 대부분의 게시판들은 이런 방법을 이용합니다.

해결책 2. text index 그대로 쓰는데 띄어쓰기 단위로 저장하지말고 따로해~ 라고 하는것
   - 알고리즘 만들어야하고 atlas에서는 사용불가능
   - mongoDB를 하드에 직접 설치하고 해야함
   - nGram 이런 알고리즘을 쓰면 된다고 하는데 이걸 언제하고 있습니까 패스합시다 

해결책 3. Search index를 사용합니다.
   - MongoDB Atlas에서만 제공하는 기능인데 
   - 클러스터 들어가보시면 아마 Search 어쩌구라는 메뉴가 있을겁니다. 그거 누르시면 됩니다. 
   - Seacrh index를 만들면 한국어 친화로 만들수 있음
   - index Name 잘 만들어, 그담 원하는 컬랙션 선택하고
   - 그담 index Analyzer 선택잘 해야대 lucene.korean 으로 둘다 선택하렴
   - 그담 Add Field 에서 필드네임에 지정할수 있는건데 안해도 될꺼야

   -> Search index에서는 server에서 find 말고 다른함수를 쓴다 aggregate()
      - 검색조건을 여러개 설정할 수가 있다. 길수가 있으니 변수로 만들자
      - 이거는 잘 검색해서 씁시다 ㅠㅠㅠ

** Search index는 mongoDB atlas에서만 제공하고 있다~!

   -> 추가정보 여러가지 검색용 연산자(필요할때마다 찾아써 그냥...)
   let 검색조건 = [
    {
      $search: {
        index: '님이만든인덱스명',
        text: {
          query: 요청.query.value,
          path: '제목'  // 제목날짜 둘다 찾고 싶으면 ['제목', '날짜']
        }
      }
    },
   { $sort : { _id : 1 } },
   { $limit : 10 },
   { $project : { 제목 : 1, _id : 0 } }
   ]

   $sort를 쓰면 결과를 정렬해서 가져옵니다. _id를 오름차순으로 정렬해주세요~ 라고 썼습니다.

   $limit을 쓰면 결과를 제한해줍니다. 맨위의 10개만 가져오라고 시켰습니다. 

   $project를 쓰면 찾아온 결과 중에 원하는 항목만 보여줍니다. 0은 안보여주고 1은 보여주라는 뜻입니다. 위의 코드는 _id는 빼고 제목만 가져오겠군요. 

   이 외에도 백만개의 $연산자가 있다고 합니다.